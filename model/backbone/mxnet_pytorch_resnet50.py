import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F

__weights_dict = dict()

def load_weights(weight_file):
    if weight_file == None:
        return

    try:
        weights_dict = np.load(weight_file).item()
    except:
        weights_dict = np.load(weight_file, encoding='bytes').item()

    return weights_dict


class ResNet50_v2(nn.Module):
    output_size = 2048

    def __init__(self, pretrained=True, weight_file='/home/wonpyo/model_zoo_mxnet/resnet50.npy'):
        super(ResNet50_v2, self).__init__()
        global __weights_dict
        __weights_dict = load_weights(weight_file)

        self.bn_data = self.__batch_normalization(2, 'bn_data', num_features=3, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.conv0 = self.__conv(2, name='conv0', in_channels=3, out_channels=64, kernel_size=(7, 7), stride=(2, 2), groups=1, bias=False)
        self.bn0 = self.__batch_normalization(2, 'bn0', num_features=64, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit1_bn1 = self.__batch_normalization(2, 'stage1_unit1_bn1', num_features=64, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit1_conv1 = self.__conv(2, name='stage1_unit1_conv1', in_channels=64, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage1_unit1_sc = self.__conv(2, name='stage1_unit1_sc', in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage1_unit1_bn2 = self.__batch_normalization(2, 'stage1_unit1_bn2', num_features=64, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit1_conv2 = self.__conv(2, name='stage1_unit1_conv2', in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage1_unit1_bn3 = self.__batch_normalization(2, 'stage1_unit1_bn3', num_features=64, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit1_conv3 = self.__conv(2, name='stage1_unit1_conv3', in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage1_unit2_bn1 = self.__batch_normalization(2, 'stage1_unit2_bn1', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit2_conv1 = self.__conv(2, name='stage1_unit2_conv1', in_channels=256, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage1_unit2_bn2 = self.__batch_normalization(2, 'stage1_unit2_bn2', num_features=64, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit2_conv2 = self.__conv(2, name='stage1_unit2_conv2', in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage1_unit2_bn3 = self.__batch_normalization(2, 'stage1_unit2_bn3', num_features=64, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit2_conv3 = self.__conv(2, name='stage1_unit2_conv3', in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage1_unit3_bn1 = self.__batch_normalization(2, 'stage1_unit3_bn1', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit3_conv1 = self.__conv(2, name='stage1_unit3_conv1', in_channels=256, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage1_unit3_bn2 = self.__batch_normalization(2, 'stage1_unit3_bn2', num_features=64, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit3_conv2 = self.__conv(2, name='stage1_unit3_conv2', in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage1_unit3_bn3 = self.__batch_normalization(2, 'stage1_unit3_bn3', num_features=64, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage1_unit3_conv3 = self.__conv(2, name='stage1_unit3_conv3', in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit1_bn1 = self.__batch_normalization(2, 'stage2_unit1_bn1', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit1_conv1 = self.__conv(2, name='stage2_unit1_conv1', in_channels=256, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit1_sc = self.__conv(2, name='stage2_unit1_sc', in_channels=256, out_channels=512, kernel_size=(1, 1), stride=(2, 2), groups=1, bias=False)
        self.stage2_unit1_bn2 = self.__batch_normalization(2, 'stage2_unit1_bn2', num_features=128, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit1_conv2 = self.__conv(2, name='stage2_unit1_conv2', in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(2, 2), groups=1, bias=False)
        self.stage2_unit1_bn3 = self.__batch_normalization(2, 'stage2_unit1_bn3', num_features=128, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit1_conv3 = self.__conv(2, name='stage2_unit1_conv3', in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit2_bn1 = self.__batch_normalization(2, 'stage2_unit2_bn1', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit2_conv1 = self.__conv(2, name='stage2_unit2_conv1', in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit2_bn2 = self.__batch_normalization(2, 'stage2_unit2_bn2', num_features=128, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit2_conv2 = self.__conv(2, name='stage2_unit2_conv2', in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit2_bn3 = self.__batch_normalization(2, 'stage2_unit2_bn3', num_features=128, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit2_conv3 = self.__conv(2, name='stage2_unit2_conv3', in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit3_bn1 = self.__batch_normalization(2, 'stage2_unit3_bn1', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit3_conv1 = self.__conv(2, name='stage2_unit3_conv1', in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit3_bn2 = self.__batch_normalization(2, 'stage2_unit3_bn2', num_features=128, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit3_conv2 = self.__conv(2, name='stage2_unit3_conv2', in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit3_bn3 = self.__batch_normalization(2, 'stage2_unit3_bn3', num_features=128, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit3_conv3 = self.__conv(2, name='stage2_unit3_conv3', in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit4_bn1 = self.__batch_normalization(2, 'stage2_unit4_bn1', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit4_conv1 = self.__conv(2, name='stage2_unit4_conv1', in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit4_bn2 = self.__batch_normalization(2, 'stage2_unit4_bn2', num_features=128, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit4_conv2 = self.__conv(2, name='stage2_unit4_conv2', in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage2_unit4_bn3 = self.__batch_normalization(2, 'stage2_unit4_bn3', num_features=128, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage2_unit4_conv3 = self.__conv(2, name='stage2_unit4_conv3', in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit1_bn1 = self.__batch_normalization(2, 'stage3_unit1_bn1', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit1_conv1 = self.__conv(2, name='stage3_unit1_conv1', in_channels=512, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit1_sc = self.__conv(2, name='stage3_unit1_sc', in_channels=512, out_channels=1024, kernel_size=(1, 1), stride=(2, 2), groups=1, bias=False)
        self.stage3_unit1_bn2 = self.__batch_normalization(2, 'stage3_unit1_bn2', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit1_conv2 = self.__conv(2, name='stage3_unit1_conv2', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(2, 2), groups=1, bias=False)
        self.stage3_unit1_bn3 = self.__batch_normalization(2, 'stage3_unit1_bn3', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit1_conv3 = self.__conv(2, name='stage3_unit1_conv3', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit2_bn1 = self.__batch_normalization(2, 'stage3_unit2_bn1', num_features=1024, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit2_conv1 = self.__conv(2, name='stage3_unit2_conv1', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit2_bn2 = self.__batch_normalization(2, 'stage3_unit2_bn2', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit2_conv2 = self.__conv(2, name='stage3_unit2_conv2', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit2_bn3 = self.__batch_normalization(2, 'stage3_unit2_bn3', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit2_conv3 = self.__conv(2, name='stage3_unit2_conv3', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit3_bn1 = self.__batch_normalization(2, 'stage3_unit3_bn1', num_features=1024, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit3_conv1 = self.__conv(2, name='stage3_unit3_conv1', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit3_bn2 = self.__batch_normalization(2, 'stage3_unit3_bn2', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit3_conv2 = self.__conv(2, name='stage3_unit3_conv2', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit3_bn3 = self.__batch_normalization(2, 'stage3_unit3_bn3', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit3_conv3 = self.__conv(2, name='stage3_unit3_conv3', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit4_bn1 = self.__batch_normalization(2, 'stage3_unit4_bn1', num_features=1024, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit4_conv1 = self.__conv(2, name='stage3_unit4_conv1', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit4_bn2 = self.__batch_normalization(2, 'stage3_unit4_bn2', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit4_conv2 = self.__conv(2, name='stage3_unit4_conv2', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit4_bn3 = self.__batch_normalization(2, 'stage3_unit4_bn3', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit4_conv3 = self.__conv(2, name='stage3_unit4_conv3', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit5_bn1 = self.__batch_normalization(2, 'stage3_unit5_bn1', num_features=1024, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit5_conv1 = self.__conv(2, name='stage3_unit5_conv1', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit5_bn2 = self.__batch_normalization(2, 'stage3_unit5_bn2', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit5_conv2 = self.__conv(2, name='stage3_unit5_conv2', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit5_bn3 = self.__batch_normalization(2, 'stage3_unit5_bn3', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit5_conv3 = self.__conv(2, name='stage3_unit5_conv3', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit6_bn1 = self.__batch_normalization(2, 'stage3_unit6_bn1', num_features=1024, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit6_conv1 = self.__conv(2, name='stage3_unit6_conv1', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit6_bn2 = self.__batch_normalization(2, 'stage3_unit6_bn2', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit6_conv2 = self.__conv(2, name='stage3_unit6_conv2', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage3_unit6_bn3 = self.__batch_normalization(2, 'stage3_unit6_bn3', num_features=256, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage3_unit6_conv3 = self.__conv(2, name='stage3_unit6_conv3', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage4_unit1_bn1 = self.__batch_normalization(2, 'stage4_unit1_bn1', num_features=1024, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage4_unit1_conv1 = self.__conv(2, name='stage4_unit1_conv1', in_channels=1024, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage4_unit1_sc = self.__conv(2, name='stage4_unit1_sc', in_channels=1024, out_channels=2048, kernel_size=(1, 1), stride=(2, 2), groups=1, bias=False)
        self.stage4_unit1_bn2 = self.__batch_normalization(2, 'stage4_unit1_bn2', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage4_unit1_conv2 = self.__conv(2, name='stage4_unit1_conv2', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(2, 2), groups=1, bias=False)
        self.stage4_unit1_bn3 = self.__batch_normalization(2, 'stage4_unit1_bn3', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage4_unit1_conv3 = self.__conv(2, name='stage4_unit1_conv3', in_channels=512, out_channels=2048, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage4_unit2_bn1 = self.__batch_normalization(2, 'stage4_unit2_bn1', num_features=2048, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage4_unit2_conv1 = self.__conv(2, name='stage4_unit2_conv1', in_channels=2048, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage4_unit2_bn2 = self.__batch_normalization(2, 'stage4_unit2_bn2', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage4_unit2_conv2 = self.__conv(2, name='stage4_unit2_conv2', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage4_unit2_bn3 = self.__batch_normalization(2, 'stage4_unit2_bn3', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage4_unit2_conv3 = self.__conv(2, name='stage4_unit2_conv3', in_channels=512, out_channels=2048, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage4_unit3_bn1 = self.__batch_normalization(2, 'stage4_unit3_bn1', num_features=2048, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage4_unit3_conv1 = self.__conv(2, name='stage4_unit3_conv1', in_channels=2048, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.stage4_unit3_bn2 = self.__batch_normalization(2, 'stage4_unit3_bn2', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage4_unit3_conv2 = self.__conv(2, name='stage4_unit3_conv2', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=False)
        self.stage4_unit3_bn3 = self.__batch_normalization(2, 'stage4_unit3_bn3', num_features=512, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.stage4_unit3_conv3 = self.__conv(2, name='stage4_unit3_conv3', in_channels=512, out_channels=2048, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=False)
        self.bn1 = self.__batch_normalization(2, 'bn1', num_features=2048, eps=1.9999999494757503e-05, momentum=0.8999999761581421)
        self.fc1 = self.__dense(name = 'fc1', in_features = 2048, out_features = 1000, bias = True)

    def forward(self, x):
        bn_data         = self.bn_data(x)
        conv0_pad       = F.pad(bn_data, (3, 3, 3, 3))
        conv0           = self.conv0(conv0_pad)
        bn0             = self.bn0(conv0)
        relu0           = F.relu(bn0)
        pooling0_pad    = F.pad(relu0, (1, 1, 1, 1), value=float('-inf'))
        pooling0        = F.max_pool2d(pooling0_pad, kernel_size=(3, 3), stride=(2, 2), padding=0, ceil_mode=False)
        stage1_unit1_bn1 = self.stage1_unit1_bn1(pooling0)
        stage1_unit1_relu1 = F.relu(stage1_unit1_bn1)
        stage1_unit1_conv1 = self.stage1_unit1_conv1(stage1_unit1_relu1)
        stage1_unit1_sc = self.stage1_unit1_sc(stage1_unit1_relu1)
        stage1_unit1_bn2 = self.stage1_unit1_bn2(stage1_unit1_conv1)
        stage1_unit1_relu2 = F.relu(stage1_unit1_bn2)
        stage1_unit1_conv2_pad = F.pad(stage1_unit1_relu2, (1, 1, 1, 1))
        stage1_unit1_conv2 = self.stage1_unit1_conv2(stage1_unit1_conv2_pad)
        stage1_unit1_bn3 = self.stage1_unit1_bn3(stage1_unit1_conv2)
        stage1_unit1_relu3 = F.relu(stage1_unit1_bn3)
        stage1_unit1_conv3 = self.stage1_unit1_conv3(stage1_unit1_relu3)
        plus0           = stage1_unit1_conv3 + stage1_unit1_sc
        stage1_unit2_bn1 = self.stage1_unit2_bn1(plus0)
        stage1_unit2_relu1 = F.relu(stage1_unit2_bn1)
        stage1_unit2_conv1 = self.stage1_unit2_conv1(stage1_unit2_relu1)
        stage1_unit2_bn2 = self.stage1_unit2_bn2(stage1_unit2_conv1)
        stage1_unit2_relu2 = F.relu(stage1_unit2_bn2)
        stage1_unit2_conv2_pad = F.pad(stage1_unit2_relu2, (1, 1, 1, 1))
        stage1_unit2_conv2 = self.stage1_unit2_conv2(stage1_unit2_conv2_pad)
        stage1_unit2_bn3 = self.stage1_unit2_bn3(stage1_unit2_conv2)
        stage1_unit2_relu3 = F.relu(stage1_unit2_bn3)
        stage1_unit2_conv3 = self.stage1_unit2_conv3(stage1_unit2_relu3)
        plus1           = stage1_unit2_conv3 + plus0
        stage1_unit3_bn1 = self.stage1_unit3_bn1(plus1)
        stage1_unit3_relu1 = F.relu(stage1_unit3_bn1)
        stage1_unit3_conv1 = self.stage1_unit3_conv1(stage1_unit3_relu1)
        stage1_unit3_bn2 = self.stage1_unit3_bn2(stage1_unit3_conv1)
        stage1_unit3_relu2 = F.relu(stage1_unit3_bn2)
        stage1_unit3_conv2_pad = F.pad(stage1_unit3_relu2, (1, 1, 1, 1))
        stage1_unit3_conv2 = self.stage1_unit3_conv2(stage1_unit3_conv2_pad)
        stage1_unit3_bn3 = self.stage1_unit3_bn3(stage1_unit3_conv2)
        stage1_unit3_relu3 = F.relu(stage1_unit3_bn3)
        stage1_unit3_conv3 = self.stage1_unit3_conv3(stage1_unit3_relu3)
        plus2           = stage1_unit3_conv3 + plus1
        stage2_unit1_bn1 = self.stage2_unit1_bn1(plus2)
        stage2_unit1_relu1 = F.relu(stage2_unit1_bn1)
        stage2_unit1_conv1 = self.stage2_unit1_conv1(stage2_unit1_relu1)
        stage2_unit1_sc = self.stage2_unit1_sc(stage2_unit1_relu1)
        stage2_unit1_bn2 = self.stage2_unit1_bn2(stage2_unit1_conv1)
        stage2_unit1_relu2 = F.relu(stage2_unit1_bn2)
        stage2_unit1_conv2_pad = F.pad(stage2_unit1_relu2, (1, 1, 1, 1))
        stage2_unit1_conv2 = self.stage2_unit1_conv2(stage2_unit1_conv2_pad)
        stage2_unit1_bn3 = self.stage2_unit1_bn3(stage2_unit1_conv2)
        stage2_unit1_relu3 = F.relu(stage2_unit1_bn3)
        stage2_unit1_conv3 = self.stage2_unit1_conv3(stage2_unit1_relu3)
        plus3           = stage2_unit1_conv3 + stage2_unit1_sc
        stage2_unit2_bn1 = self.stage2_unit2_bn1(plus3)
        stage2_unit2_relu1 = F.relu(stage2_unit2_bn1)
        stage2_unit2_conv1 = self.stage2_unit2_conv1(stage2_unit2_relu1)
        stage2_unit2_bn2 = self.stage2_unit2_bn2(stage2_unit2_conv1)
        stage2_unit2_relu2 = F.relu(stage2_unit2_bn2)
        stage2_unit2_conv2_pad = F.pad(stage2_unit2_relu2, (1, 1, 1, 1))
        stage2_unit2_conv2 = self.stage2_unit2_conv2(stage2_unit2_conv2_pad)
        stage2_unit2_bn3 = self.stage2_unit2_bn3(stage2_unit2_conv2)
        stage2_unit2_relu3 = F.relu(stage2_unit2_bn3)
        stage2_unit2_conv3 = self.stage2_unit2_conv3(stage2_unit2_relu3)
        plus4           = stage2_unit2_conv3 + plus3
        stage2_unit3_bn1 = self.stage2_unit3_bn1(plus4)
        stage2_unit3_relu1 = F.relu(stage2_unit3_bn1)
        stage2_unit3_conv1 = self.stage2_unit3_conv1(stage2_unit3_relu1)
        stage2_unit3_bn2 = self.stage2_unit3_bn2(stage2_unit3_conv1)
        stage2_unit3_relu2 = F.relu(stage2_unit3_bn2)
        stage2_unit3_conv2_pad = F.pad(stage2_unit3_relu2, (1, 1, 1, 1))
        stage2_unit3_conv2 = self.stage2_unit3_conv2(stage2_unit3_conv2_pad)
        stage2_unit3_bn3 = self.stage2_unit3_bn3(stage2_unit3_conv2)
        stage2_unit3_relu3 = F.relu(stage2_unit3_bn3)
        stage2_unit3_conv3 = self.stage2_unit3_conv3(stage2_unit3_relu3)
        plus5           = stage2_unit3_conv3 + plus4
        stage2_unit4_bn1 = self.stage2_unit4_bn1(plus5)
        stage2_unit4_relu1 = F.relu(stage2_unit4_bn1)
        stage2_unit4_conv1 = self.stage2_unit4_conv1(stage2_unit4_relu1)
        stage2_unit4_bn2 = self.stage2_unit4_bn2(stage2_unit4_conv1)
        stage2_unit4_relu2 = F.relu(stage2_unit4_bn2)
        stage2_unit4_conv2_pad = F.pad(stage2_unit4_relu2, (1, 1, 1, 1))
        stage2_unit4_conv2 = self.stage2_unit4_conv2(stage2_unit4_conv2_pad)
        stage2_unit4_bn3 = self.stage2_unit4_bn3(stage2_unit4_conv2)
        stage2_unit4_relu3 = F.relu(stage2_unit4_bn3)
        stage2_unit4_conv3 = self.stage2_unit4_conv3(stage2_unit4_relu3)
        plus6           = stage2_unit4_conv3 + plus5
        stage3_unit1_bn1 = self.stage3_unit1_bn1(plus6)
        stage3_unit1_relu1 = F.relu(stage3_unit1_bn1)
        stage3_unit1_conv1 = self.stage3_unit1_conv1(stage3_unit1_relu1)
        stage3_unit1_sc = self.stage3_unit1_sc(stage3_unit1_relu1)
        stage3_unit1_bn2 = self.stage3_unit1_bn2(stage3_unit1_conv1)
        stage3_unit1_relu2 = F.relu(stage3_unit1_bn2)
        stage3_unit1_conv2_pad = F.pad(stage3_unit1_relu2, (1, 1, 1, 1))
        stage3_unit1_conv2 = self.stage3_unit1_conv2(stage3_unit1_conv2_pad)
        stage3_unit1_bn3 = self.stage3_unit1_bn3(stage3_unit1_conv2)
        stage3_unit1_relu3 = F.relu(stage3_unit1_bn3)
        stage3_unit1_conv3 = self.stage3_unit1_conv3(stage3_unit1_relu3)
        plus7           = stage3_unit1_conv3 + stage3_unit1_sc
        stage3_unit2_bn1 = self.stage3_unit2_bn1(plus7)
        stage3_unit2_relu1 = F.relu(stage3_unit2_bn1)
        stage3_unit2_conv1 = self.stage3_unit2_conv1(stage3_unit2_relu1)
        stage3_unit2_bn2 = self.stage3_unit2_bn2(stage3_unit2_conv1)
        stage3_unit2_relu2 = F.relu(stage3_unit2_bn2)
        stage3_unit2_conv2_pad = F.pad(stage3_unit2_relu2, (1, 1, 1, 1))
        stage3_unit2_conv2 = self.stage3_unit2_conv2(stage3_unit2_conv2_pad)
        stage3_unit2_bn3 = self.stage3_unit2_bn3(stage3_unit2_conv2)
        stage3_unit2_relu3 = F.relu(stage3_unit2_bn3)
        stage3_unit2_conv3 = self.stage3_unit2_conv3(stage3_unit2_relu3)
        plus8           = stage3_unit2_conv3 + plus7
        stage3_unit3_bn1 = self.stage3_unit3_bn1(plus8)
        stage3_unit3_relu1 = F.relu(stage3_unit3_bn1)
        stage3_unit3_conv1 = self.stage3_unit3_conv1(stage3_unit3_relu1)
        stage3_unit3_bn2 = self.stage3_unit3_bn2(stage3_unit3_conv1)
        stage3_unit3_relu2 = F.relu(stage3_unit3_bn2)
        stage3_unit3_conv2_pad = F.pad(stage3_unit3_relu2, (1, 1, 1, 1))
        stage3_unit3_conv2 = self.stage3_unit3_conv2(stage3_unit3_conv2_pad)
        stage3_unit3_bn3 = self.stage3_unit3_bn3(stage3_unit3_conv2)
        stage3_unit3_relu3 = F.relu(stage3_unit3_bn3)
        stage3_unit3_conv3 = self.stage3_unit3_conv3(stage3_unit3_relu3)
        plus9           = stage3_unit3_conv3 + plus8
        stage3_unit4_bn1 = self.stage3_unit4_bn1(plus9)
        stage3_unit4_relu1 = F.relu(stage3_unit4_bn1)
        stage3_unit4_conv1 = self.stage3_unit4_conv1(stage3_unit4_relu1)
        stage3_unit4_bn2 = self.stage3_unit4_bn2(stage3_unit4_conv1)
        stage3_unit4_relu2 = F.relu(stage3_unit4_bn2)
        stage3_unit4_conv2_pad = F.pad(stage3_unit4_relu2, (1, 1, 1, 1))
        stage3_unit4_conv2 = self.stage3_unit4_conv2(stage3_unit4_conv2_pad)
        stage3_unit4_bn3 = self.stage3_unit4_bn3(stage3_unit4_conv2)
        stage3_unit4_relu3 = F.relu(stage3_unit4_bn3)
        stage3_unit4_conv3 = self.stage3_unit4_conv3(stage3_unit4_relu3)
        plus10          = stage3_unit4_conv3 + plus9
        stage3_unit5_bn1 = self.stage3_unit5_bn1(plus10)
        stage3_unit5_relu1 = F.relu(stage3_unit5_bn1)
        stage3_unit5_conv1 = self.stage3_unit5_conv1(stage3_unit5_relu1)
        stage3_unit5_bn2 = self.stage3_unit5_bn2(stage3_unit5_conv1)
        stage3_unit5_relu2 = F.relu(stage3_unit5_bn2)
        stage3_unit5_conv2_pad = F.pad(stage3_unit5_relu2, (1, 1, 1, 1))
        stage3_unit5_conv2 = self.stage3_unit5_conv2(stage3_unit5_conv2_pad)
        stage3_unit5_bn3 = self.stage3_unit5_bn3(stage3_unit5_conv2)
        stage3_unit5_relu3 = F.relu(stage3_unit5_bn3)
        stage3_unit5_conv3 = self.stage3_unit5_conv3(stage3_unit5_relu3)
        plus11          = stage3_unit5_conv3 + plus10
        stage3_unit6_bn1 = self.stage3_unit6_bn1(plus11)
        stage3_unit6_relu1 = F.relu(stage3_unit6_bn1)
        stage3_unit6_conv1 = self.stage3_unit6_conv1(stage3_unit6_relu1)
        stage3_unit6_bn2 = self.stage3_unit6_bn2(stage3_unit6_conv1)
        stage3_unit6_relu2 = F.relu(stage3_unit6_bn2)
        stage3_unit6_conv2_pad = F.pad(stage3_unit6_relu2, (1, 1, 1, 1))
        stage3_unit6_conv2 = self.stage3_unit6_conv2(stage3_unit6_conv2_pad)
        stage3_unit6_bn3 = self.stage3_unit6_bn3(stage3_unit6_conv2)
        stage3_unit6_relu3 = F.relu(stage3_unit6_bn3)
        stage3_unit6_conv3 = self.stage3_unit6_conv3(stage3_unit6_relu3)
        plus12          = stage3_unit6_conv3 + plus11
        stage4_unit1_bn1 = self.stage4_unit1_bn1(plus12)
        stage4_unit1_relu1 = F.relu(stage4_unit1_bn1)
        stage4_unit1_conv1 = self.stage4_unit1_conv1(stage4_unit1_relu1)
        stage4_unit1_sc = self.stage4_unit1_sc(stage4_unit1_relu1)
        stage4_unit1_bn2 = self.stage4_unit1_bn2(stage4_unit1_conv1)
        stage4_unit1_relu2 = F.relu(stage4_unit1_bn2)
        stage4_unit1_conv2_pad = F.pad(stage4_unit1_relu2, (1, 1, 1, 1))
        stage4_unit1_conv2 = self.stage4_unit1_conv2(stage4_unit1_conv2_pad)
        stage4_unit1_bn3 = self.stage4_unit1_bn3(stage4_unit1_conv2)
        stage4_unit1_relu3 = F.relu(stage4_unit1_bn3)
        stage4_unit1_conv3 = self.stage4_unit1_conv3(stage4_unit1_relu3)
        plus13          = stage4_unit1_conv3 + stage4_unit1_sc
        stage4_unit2_bn1 = self.stage4_unit2_bn1(plus13)
        stage4_unit2_relu1 = F.relu(stage4_unit2_bn1)
        stage4_unit2_conv1 = self.stage4_unit2_conv1(stage4_unit2_relu1)
        stage4_unit2_bn2 = self.stage4_unit2_bn2(stage4_unit2_conv1)
        stage4_unit2_relu2 = F.relu(stage4_unit2_bn2)
        stage4_unit2_conv2_pad = F.pad(stage4_unit2_relu2, (1, 1, 1, 1))
        stage4_unit2_conv2 = self.stage4_unit2_conv2(stage4_unit2_conv2_pad)
        stage4_unit2_bn3 = self.stage4_unit2_bn3(stage4_unit2_conv2)
        stage4_unit2_relu3 = F.relu(stage4_unit2_bn3)
        stage4_unit2_conv3 = self.stage4_unit2_conv3(stage4_unit2_relu3)
        plus14          = stage4_unit2_conv3 + plus13
        stage4_unit3_bn1 = self.stage4_unit3_bn1(plus14)
        stage4_unit3_relu1 = F.relu(stage4_unit3_bn1)
        stage4_unit3_conv1 = self.stage4_unit3_conv1(stage4_unit3_relu1)
        stage4_unit3_bn2 = self.stage4_unit3_bn2(stage4_unit3_conv1)
        stage4_unit3_relu2 = F.relu(stage4_unit3_bn2)
        stage4_unit3_conv2_pad = F.pad(stage4_unit3_relu2, (1, 1, 1, 1))
        stage4_unit3_conv2 = self.stage4_unit3_conv2(stage4_unit3_conv2_pad)
        stage4_unit3_bn3 = self.stage4_unit3_bn3(stage4_unit3_conv2)
        stage4_unit3_relu3 = F.relu(stage4_unit3_bn3)
        stage4_unit3_conv3 = self.stage4_unit3_conv3(stage4_unit3_relu3)
        plus15          = stage4_unit3_conv3 + plus14
        bn1             = self.bn1(plus15)
        relu1           = F.relu(bn1)
        pool1           = F.avg_pool2d(input = relu1, kernel_size = relu1.size()[2:])
        flatten0        = pool1.view(pool1.size(0), -1)
        fc1             = self.fc1(flatten0)
        softmax         = F.softmax(fc1)
        return flatten0


    @staticmethod
    def __dense(name, **kwargs):
        global __weights_dict

        layer = nn.Linear(**kwargs)
        layer.state_dict()['weight'].copy_(torch.from_numpy(__weights_dict[name]['weights']).t())
        if 'bias' in __weights_dict[name]:
            layer.state_dict()['bias'].copy_(torch.from_numpy(__weights_dict[name]['bias']))
        return layer

    @staticmethod
    def __batch_normalization(dim, name, **kwargs):
        global __weights_dict

        if   dim == 1:  layer = nn.BatchNorm1d(**kwargs)
        elif dim == 2:  layer = nn.BatchNorm2d(**kwargs)
        elif dim == 3:  layer = nn.BatchNorm3d(**kwargs)
        else:           raise NotImplementedError()

        if 'scale' in __weights_dict[name]:
            layer.state_dict()['weight'].copy_(torch.from_numpy(__weights_dict[name]['scale']))
        else:
            layer.weight.data.fill_(1)

        if 'bias' in __weights_dict[name]:
            layer.state_dict()['bias'].copy_(torch.from_numpy(__weights_dict[name]['bias']))
        else:
            layer.bias.data.fill_(0)

        layer.state_dict()['running_mean'].copy_(torch.from_numpy(__weights_dict[name]['mean']))
        layer.state_dict()['running_var'].copy_(torch.from_numpy(__weights_dict[name]['var']))
        return layer

    @staticmethod
    def __conv(dim, name, **kwargs):
        global __weights_dict

        if   dim == 1:  layer = nn.Conv1d(**kwargs)
        elif dim == 2:  layer = nn.Conv2d(**kwargs)
        elif dim == 3:  layer = nn.Conv3d(**kwargs)
        else:           raise NotImplementedError()

        print(layer.weight.size())
        print(__weights_dict[name]['weights'].shape)

        layer.state_dict()['weight'].copy_(torch.from_numpy(__weights_dict[name]['weights']).permute(3, 2, 0, 1))
        if 'bias' in __weights_dict[name]:
            layer.state_dict()['bias'].copy_(torch.from_numpy(__weights_dict[name]['bias']))
        return layer
